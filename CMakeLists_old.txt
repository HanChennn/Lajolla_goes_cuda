cmake_minimum_required(VERSION 3.18)
project(lajolla LANGUAGES C CXX CUDA)

# =============================================
# 重要路径配置
# =============================================
# 假设项目目录结构：
#   lajolla_public_GPU/
#   ├─ embree/          <- Embree本地依赖
#   │  ├─ bin/          <- DLL文件
#   │  └─ include/      <- 头文件
#   └─ src/             <- 项目源码
# =============================================

# if(MSVC)
#     add_compile_options($<$<COMPILE_LANGUAGE:CXX>:/std:c++17>)
# endif()

# -------------------------------------------------
# 配置Embree（手动指定本地路径）
# -------------------------------------------------
set(EMBREE_ROOT ${CMAKE_SOURCE_DIR}/embree)      # Embree 根目录
set(EMBREE_INCLUDE_DIR ${EMBREE_ROOT}/include)   # 头文件路径
set(EMBREE_LIBRARY_DIR ${EMBREE_ROOT}/lib-win32) # 关键修改：指向 lib-win32 目录

# 包含头文件
include_directories(
    ${CMAKE_SOURCE_DIR}/src
    ${EMBREE_INCLUDE_DIR}
)

link_directories(${EMBREE_LIBRARY_DIR})
# 设置 C++17 标准
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
# -------------------------------------------------
# 配置CUDA
# -------------------------------------------------
# 设置CUDA架构（根据你的GPU调整）
set(CMAKE_CUDA_ARCHITECTURES "89")  # sm_89 for RTX 40系列等
set(CMAKE_CUDA_STANDARD 17)
set(CMAKE_CUDA_STANDARD_REQUIRED ON)
set(CMAKE_CUDA_SEPARABLE_COMPILATION ON)

# 查找CUDA工具包
find_package(CUDAToolkit REQUIRED)
message(STATUS "CUDAToolkit found: ${CUDAToolkit_FOUND}")
message(STATUS "CUDAToolkit version: ${CUDAToolkit_VERSION}")
message(STATUS "CUDAToolkit库目录: ${CUDAToolkit_LIBRARY_DIR}")

find_library(CUDA_DEVRT_LIB
    NAMES cudadevrt
    PATHS "${CUDAToolkit_LIBRARY_DIR}"
    REQUIRED
)
message(STATUS "cudadevrt.lib 路径: ${CUDA_DEVRT_LIB}")  # 应输出类似 C:/Program Files/NVIDIA GPU 

# -------------------------------------------------
# 编译选项
# -------------------------------------------------
set(CMAKE_BUILD_TYPE RelWithDebInfo)

# # 显式指定 CUDA 源文件
# set(CUDA_SRCS
#     src/render.cu
# )
# set_source_files_properties(${CUDA_SRCS} PROPERTIES LANGUAGE CUDA)

# if(MSVC)
#     # Windows/MSVC选项
#     # add_compile_options(/W4 /WX)  # 启用警告级别4并视警告为错误
#     # add_compile_options($<$<COMPILE_LANGUAGE:CUDA>:-Xcompiler="/W4 /WX">)
#     # add_definitions(-DNOMINMAX)   # 禁用Windows的min/max宏
# else()
#     # Linux/GCC选项
#     add_compile_options(-Wall -Wextra -Werror)
# endif()

# -------------------------------------------------
# 源文件列表（根据你的项目调整）
# -------------------------------------------------
set(SRCS
    src/3rdparty/miniz.h
    src/3rdparty/miniz.c
    src/3rdparty/pugiconfig.hpp
    src/3rdparty/pugixml.hpp
    src/3rdparty/pugixml.cpp
    src/3rdparty/stb_image.h
    src/3rdparty/tinyexr.h
    src/3rdparty/tinyply.h

    src/filters/box.inl
    src/filters/gaussian.inl
    src/filters/tent.inl

    src/lights/diffuse_area_light.inl
    src/lights/envmap.inl

    src/materials/lambertian.inl
    src/materials/roughdielectric.inl
    src/materials/roughplastic.inl
    src/materials/disney_diffuse.inl
    src/materials/disney_metal.inl
    src/materials/disney_glass.inl
    src/materials/disney_clearcoat.inl
    src/materials/disney_sheen.inl
    src/materials/disney_bsdf.inl

    src/media/homogeneous.inl
    src/media/heterogeneous.inl

    src/parsers/load_serialized.h
    src/parsers/parse_obj.h
    src/parsers/parse_ply.h
    src/parsers/parse_scene.h
    src/parsers/load_serialized.cpp
    src/parsers/parse_obj.cpp
    src/parsers/parse_ply.cpp
    src/parsers/parse_scene.cpp

    src/phase_functions/isotropic.inl
    src/phase_functions/henyeygreenstein.inl

    src/shapes/sphere.inl
    src/shapes/triangle_mesh.inl

    src/camera.h
    src/filter.h
    src/flexception.h
    src/frame.h
    src/image.h
    src/intersection.h
    src/lajolla.h
    src/light.h
    src/material.h
    src/matrix.h
    src/medium.h
    src/microfacet.h
    src/mipmap.h
    src/parallel.h
    src/path_tracing.h
    src/phase_function.h
    src/vol_path_tracing.h
    src/volume.h
    src/point_and_normal.h
    src/ray.h
    src/render.h
    src/scene.h
    src/shape.h
    src/spectrum.h
    src/table_dist.h
    src/texture.h
    src/transform.h
    src/vector.h

    src/camera.cpp
    src/filter.cpp
    src/image.cpp
    src/intersection.cpp
    src/light.cpp
    src/material.cpp
    src/medium.cpp
    src/parallel.cpp
    src/phase_function.cpp
    src/render.cpp
    src/scene.cpp
    src/shape.cpp
    src/table_dist.cpp
    src/transform.cpp
    src/volume.cpp

    # CUDA相关文件
    src/render.cu
    src/render_cu.h
    src/bvh.cpp
    src/bvh.h
    src/AABB.h
)

# -------------------------------------------------
# 构建目标
# -------------------------------------------------

# 创建静态库
# add_library(lajolla_lib STATIC
#     ${SRCS}
#     ${CUDA_SRCS}
# )
add_library(lajolla_lib STATIC ${SRCS})
target_link_libraries(lajolla_lib PRIVATE 
    ${CUDA_DEVRT_LIB}
    embree4.lib  # 直接链接库文件名（通过 link_directories 路径查找）
    tbb12.lib
)

# CUDA 编译选项
target_compile_options(lajolla_lib PRIVATE
    $<$<COMPILE_LANGUAGE:CUDA>:
        -rdc=true
        --generate-code=arch=compute_89,code=sm_89
        --expt-relaxed-constexpr
    >
)


# 显式添加头文件路径到目标
target_include_directories(lajolla_lib PRIVATE
    ${CMAKE_SOURCE_DIR}/src
    ${EMBREE_INCLUDE_DIR}  # 现在路径为 embree/include
)

# 显式设置C++17和CUDA标准
target_compile_features(lajolla_lib PRIVATE cxx_std_17)

target_link_libraries(lajolla_lib PRIVATE
    CUDA::cudart
    embree4.lib
    tbb12.lib
)
# 可执行文件
add_executable(lajolla src/main.cpp)
target_link_libraries(lajolla PRIVATE
    lajolla_lib
    CUDA::cudart      # CUDA 运行时库
    ${CUDA_DEVRT_LIB}  # 设备运行时库
)
if(MSVC)
    add_custom_command(TARGET lajolla POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy
            "${EMBREE_ROOT}/bin/embree4.dll"
            $<TARGET_FILE_DIR:lajolla>
        COMMAND ${CMAKE_COMMAND} -E copy
            "${EMBREE_ROOT}/bin/tbb12.dll"
            $<TARGET_FILE_DIR:lajolla>
    )
endif()

# -------------------------------------------------
# 测试（保持原样）
# -------------------------------------------------
enable_testing()

add_executable(test_filter src/tests/filter.cpp)
target_link_libraries(test_filter lajolla_lib)
add_test(filter test_filter)
set_tests_properties(filter PROPERTIES PASS_REGULAR_EXPRESSION "SUCCESS")